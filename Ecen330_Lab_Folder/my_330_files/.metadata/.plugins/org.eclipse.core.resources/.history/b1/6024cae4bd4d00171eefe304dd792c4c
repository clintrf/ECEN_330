/*
 * simonControl.c
 *
 *  Created on: Jun 8, 2017
 *      Author: clintrf
 */


#include "verifySequence_runTest.h"
#include "flashSequence.h"
#include "buttonHandler.h"
#include "simonDisplay.h"
#include "simonControl.h"
#include "supportFiles/display.h"
#include "supportFiles/utils.h"
#include "globals.h"
#include <stdio.h>
#include <stdint.h>
#include "../Lab2_switch_button/buttons.h"

#define START_MSG "TOUCH TO START"
#define SIMON_MSG "SIMON"
#define YAY_MSG "Yay!"
#define NEW_L_MSG "Touch for new level"
#define LONG_MSG "Longest Sequence: "

#define START_MSG_X_COORD DISPLAY_WIDTH /4
#define START_MSG_Y_COORD DISPLAY_HEIGHT/2

#define SIMON_MSG_X_COORD DISPLAY_WIDTH /4
#define SIMON_MSG_Y_COORD DISPLAY_HEIGHT/3

#define YAY_MSG_X_COORD DISPLAY_WIDTH/3
#define YAY_MSG_Y_COORD DISPLAY_HEIGHT/3

#define NEW_L_MSG_X_COORD 280
#define NEW_L_MSG_Y_COORD YAY_MSG_Y_COORD

#define LONG_MSG_X_COORD 280
#define LONG_MSG_Y_COORD YAY_MSG_Y_COORD

#define NUM_MSG_X_COORD 50
#define NUM_MSG_Y_COORD YAY_MSG_Y_COORD

#define FALSE 0
#define TRUE 1

#define TEXT_SIZE_L 5
#define TEXT_SIZE_S 2
#define WAIT_TIME 50
#define START_LEVEL 4


uint8_t myArray[GLOBALS_MAX_FLASH_SEQUENCE];
uint8_t currLevel = START_LEVEL;
uint8_t currIter = 1;
uint8_t randNum = 0;                                //Number that seeds the random number
uint8_t yayCounter = 0;
uint8_t newLevelCounter = 0;
uint8_t longestSeqCounter = 0;



//**********FLAGS**********//
uint8_t initFlag = 0;




enum control_st_m{
    control_init_st,                    //the initializing state
    control_touch_st,          //state waiting for a touch
    control_flash_enable_st,                   //state for the flash sequence
    control_verify_enable,
    control_verify_disable,
    control_yay_st,
    control_new_level_st,
    control_longest_sq_st
}controlCurrent = control_init_st;      //state that holds the current state







void simonDebugStatePrint() {
  static control_st_m previousState;
  static bool firstPass = true;
  // Only print the message if:
  // 1. This the first pass and the value for previousState is unknown.
  // 2. previousState != currentState - this prevents reprinting the same state name over and over.
  if (previousState != controlCurrent || firstPass) {
    firstPass = false;                // previousState will be defined, firstPass is false.
    previousState = controlCurrent;     // keep track of the last state that you were in.
    //printf("msCounter:%d\n\r", msCounter);
    switch(controlCurrent) {            // This prints messages based upon the state that you were in.
        case control_init_st:
            printf("control_init_st\n\r");
            break;
        case control_touch_st:
            printf("control_touch_st\n\r");
            break;
        case control_flash_enable_st:
            printf("control_flash_enable_st\n\r");
            break;
        case control_verify_enable:
            printf("control_verify_enable\n\r");
            break;
        case control_verify_disable:
            printf("control_verify_disable\n\r");
            break;
        case control_yay_st:
            printf("control_yay_st\n\r");
            break;
        case control_new_level_st:
            printf("control_new_level_st\n\r");
            break;
        case control_longest_sq_st:
            printf("control_longest_sq_st\n\r");
            break;
     }
  }
}








void randNumGen(){
    srand(randNum);
    for(uint8_t i = 0; i < currLevel; i++){
        myArray[i] = rand() % (START_LEVEL);
    }
}
//todo

void simonControl_tick(){
    switch(controlCurrent){
    case control_init_st:                  //state number 1 for moore
        randNum++;
        globals_setSequenceIterationLength(currIter);
        globals_setSequence(myArray,currLevel);
        if(!initFlag){
            display_setCursor(START_MSG_X_COORD, START_MSG_Y_COORD);
            display_setTextColor(DISPLAY_WHITE);
            display_setTextSize(TEXT_SIZE_S);
            display_println(START_MSG);
            display_setCursor(SIMON_MSG_X_COORD, SIMON_MSG_Y_COORD);
            display_setTextColor(DISPLAY_WHITE);
            display_setTextSize(TEXT_SIZE_L);
            display_println(SIMON_MSG);
            initFlag = TRUE;                      //turn on the init Flag saying that the screen is initialized
        }
        break;
    case control_touch_st:        //state number 2 for moore
        break;
    case control_flash_enable_st:          //state number 4 for moore
        flashSequence_enable();
        break;
    case control_verify_enable:            //state number 7 for moore
        verifySequence_enable();
        break;
    case control_verify_disable:           //state number 9 for moore
        verifySequence_disable();
        break;
    case control_yay_st:
        yayCounter++;
        break;
    case control_new_level_st:
        newLevelCounter++;
        break;
    case control_longest_sq_st:
        longestSeqCounter++;
        break;
    }
    switch(controlCurrent){
    case control_init_st:                  //state number 1 for mealy

        randNumGen();
        globals_setSequenceIterationLength(currIter);
        globals_setSequence(myArray,currLevel);
        controlCurrent = control_touch_st;
        break;
    case control_touch_st:        //state number 2 for mealy
        if(display_isTouched()){
            display_setCursor(START_MSG_X_COORD, START_MSG_Y_COORD);
            display_setTextColor(DISPLAY_BLACK);
            display_setTextSize(TEXT_SIZE_S);
            display_println(START_MSG);
            display_setCursor(SIMON_MSG_X_COORD, SIMON_MSG_Y_COORD);
            display_setTextColor(DISPLAY_BLACK);
            display_setTextSize(TEXT_SIZE_L);
            display_println(SIMON_MSG);
            controlCurrent = control_flash_enable_st;
        }
        break;
    case control_flash_enable_st:          //state number 4 for mealy
        controlCurrent = control_flash_wait_st;
        break;
    case control_flash_wait_st:            //state number 5 for mealy
        if(flashSequence_isComplete()){
            controlCurrent = control_flash_disable;
        }
        break;
    case control_flash_disable:            //state number 6 for mealy
        controlCurrent = control_verify_enable;
        break;
    case control_verify_enable:            //state number 7 for mealy
        controlCurrent = control_verify_wait_st;
        break;
    case control_verify_wait_st:           //state number 8 for mealy
        if(verifySequence_isComplete()){
            controlCurrent = control_verify_disable;
        }
        break;
    case control_verify_disable:           //state number 9 for mealy
        if(currIter == currLevel){
            display_setCursor(YAY_MSG_X_COORD, YAY_MSG_Y_COORD);
            display_setTextColor(DISPLAY_WHITE);
            display_setTextSize(TEXT_SIZE_S);
            display_println(YAY_MSG);
            controlCurrent = control_yay_st;
        }
        else if(verifySequence_isTimeOutError()){
            controlCurrent = control_longest_sq_st;
        }
        else{
            globals_setSequenceIterationLength(++currIter);
            controlCurrent = control_flash_enable_st;
        }
        break;
    case control_yay_st:
        if(yayCounter == WAIT_TIME){
            display_setCursor(LONG_MSG_X_COORD, LONG_MSG_Y_COORD);
            display_setTextColor(DISPLAY_WHITE);
            display_setTextSize(TEXT_SIZE_S);
            display_println(NEW_L_MSG);
            display_setCursor(NEW_L_MSG_X_COORD, NEW_L_MSG_Y_COORD);
            display_println(currLevel - START_LEVEL);
        }
        if(yayCounter <= WAIT_TIME){
            yayCounter++;
        }
        else{
            display_setCursor(YAY_MSG_X_COORD, YAY_MSG_Y_COORD);
            display_setTextColor(DISPLAY_BLACK);
            display_setTextSize(TEXT_SIZE_S);
            display_println(YAY_MSG);
            controlCurrent = control_new_level_st;
            yayCounter = FALSE;
        }
        break;
    case control_new_level_st:
        if(newLevelCounter == WAIT_TIME){
            //print longSQ
        }
        if(display_isTouched()){
            display_setCursor(LONG_MSG_X_COORD, LONG_MSG_Y_COORD);
            display_setTextColor(DISPLAY_BLACK);
            display_setTextSize(TEXT_SIZE_S);
            display_println(NEW_L_MSG);
            display_setCursor(NEW_L_MSG_X_COORD, NEW_L_MSG_Y_COORD);
            display_println(currLevel - START_LEVEL);
            controlCurrent = control_longest_sq_st;
            newLevelCounter = FALSE;


            currLevel++;
            currIter = 1;

            initFlag = 0;
            yayCounter = 0;
            newLevelCounter = 0;
            longestSeqCounter = 0;

        }
        else if(newLevelCounter <= WAIT_TIME){
            newLevelCounter++;
        }
        else{
            display_setCursor(LONG_MSG_X_COORD, LONG_MSG_Y_COORD);
            display_setTextColor(DISPLAY_BLACK);
            display_setTextSize(TEXT_SIZE_S);
            display_println(NEW_L_MSG);
            display_setCursor(NEW_L_MSG_X_COORD, NEW_L_MSG_Y_COORD);
            display_println(currLevel - START_LEVEL);
            controlCurrent = control_flash_enable_st;
            newLevelCounter = FALSE;
        }
        break;
    case control_longest_sq_st:
        if(longestSeqCounter <= WAIT_TIME){
            longestSeqCounter++;
        }
        else{
            display_setCursor(LONG_MSG_X_COORD, LONG_MSG_Y_COORD);
            display_setTextColor(DISPLAY_BLACK);
            display_setTextSize(TEXT_SIZE_S);
            display_println(YAY_MSG);
            initFlag = FALSE;
            controlCurrent = control_init_st;
            longestSeqCounter = FALSE;
        }
        break;
    }
}

